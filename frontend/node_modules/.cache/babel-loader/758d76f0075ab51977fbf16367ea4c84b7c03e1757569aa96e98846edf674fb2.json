{"ast":null,"code":"var _jsxFileName = \"/Users/gaspersimec/Documents/HabitsApp/frontend/src/components/ProgressBar.js\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ProgressBar = ({\n  progress\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"progress-content\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-bar-fill\",\n        style: {\n          width: `${progress}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 7\n  }, this);\n};\n_c = ProgressBar;\nexport default ProgressBar;\n\n// Habits Grid stuff:\n\n// const [progress, setProgress] = useState(0); // Initial progress value\n\n// const updateProgress = () => {\n//   const completedHabitsCount = habits ? habits.filter((habit) => habit.status === true).length : 0;\n//   const totalHabitsCount = habits.length;\n//   const newProgress = Math.round((completedHabitsCount / totalHabitsCount) * 100,1);\n//   setProgress(newProgress);\n// };\n\n//  <div className=\"progress-content\">\n//               <p> {progress !== 100 ? \"You are almost done, go ahead!\" : \"Congratulations, you are done!\"} </p>\n//               <p> {progress ? progress : 0}% </p>\n//           </div>\n//           <ProgressBar progress={progress}/> \n\n// const handleHabitStatusChange = async (habitIndex) => {\n//   const updatedHabits = [...habits];\n//   updatedHabits[habitIndex].status = !updatedHabits[habitIndex].status;\n//   setHabits(updatedHabits);\n\n// const habitToUpdate = updatedHabits[habitIndex];\n\n// try {\n//   const response = await fetch(`/api/habits/${habitToUpdate._id}`, {\n//     method: 'PATCH',\n//     headers: {\n//       'Content-Type': 'application/json',\n//     },\n//     body: JSON.stringify(habitToUpdate),\n//   });\n\n//     if (!response.ok) {\n//       throw new Error('Failed to update habit.');\n//     }\n//   } catch (error) {\n//     console.error(error);\n//     // Handle error scenario\n//   }\n//   console.log(\"updating\")\n// };\nvar _c;\n$RefreshReg$(_c, \"ProgressBar\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","ProgressBar","progress","className","children","style","width","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/gaspersimec/Documents/HabitsApp/frontend/src/components/ProgressBar.js"],"sourcesContent":["import React from 'react';\n\nconst ProgressBar = ({ progress }) => {\n  \n    return (\n      <div className=\"progress-content\">\n        <div className=\"progress-bar\">\n          <div\n            className=\"progress-bar-fill\"\n            style={{ width: `${progress}%` }}\n          ></div>\n        </div>\n      </div>\n    );\n  };\n\nexport default ProgressBar\n\n// Habits Grid stuff:\n\n// const [progress, setProgress] = useState(0); // Initial progress value\n\n// const updateProgress = () => {\n//   const completedHabitsCount = habits ? habits.filter((habit) => habit.status === true).length : 0;\n//   const totalHabitsCount = habits.length;\n//   const newProgress = Math.round((completedHabitsCount / totalHabitsCount) * 100,1);\n//   setProgress(newProgress);\n// };\n\n\n//  <div className=\"progress-content\">\n//               <p> {progress !== 100 ? \"You are almost done, go ahead!\" : \"Congratulations, you are done!\"} </p>\n//               <p> {progress ? progress : 0}% </p>\n//           </div>\n//           <ProgressBar progress={progress}/> \n\n  // const handleHabitStatusChange = async (habitIndex) => {\n  //   const updatedHabits = [...habits];\n  //   updatedHabits[habitIndex].status = !updatedHabits[habitIndex].status;\n  //   setHabits(updatedHabits);\n\n      // const habitToUpdate = updatedHabits[habitIndex];\n  \n    // try {\n    //   const response = await fetch(`/api/habits/${habitToUpdate._id}`, {\n    //     method: 'PATCH',\n    //     headers: {\n    //       'Content-Type': 'application/json',\n    //     },\n    //     body: JSON.stringify(habitToUpdate),\n    //   });\n  \n  //     if (!response.ok) {\n  //       throw new Error('Failed to update habit.');\n  //     }\n  //   } catch (error) {\n  //     console.error(error);\n  //     // Handle error scenario\n  //   }\n  //   console.log(\"updating\")\n  // };"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,WAAW,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAElC,oBACEF,OAAA;IAAKG,SAAS,EAAC,kBAAkB;IAAAC,QAAA,eAC/BJ,OAAA;MAAKG,SAAS,EAAC,cAAc;MAAAC,QAAA,eAC3BJ,OAAA;QACEG,SAAS,EAAC,mBAAmB;QAC7BE,KAAK,EAAE;UAAEC,KAAK,EAAG,GAAEJ,QAAS;QAAG;MAAE;QAAAK,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC7B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAACC,EAAA,GAZEV,WAAW;AAcjB,eAAeA,WAAW;;AAE1B;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;;AAEE;AACA;AACA;AACA;;AAEI;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAU,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}