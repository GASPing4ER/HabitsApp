{"ast":null,"code":"var _jsxFileName = \"/Users/gaspersimec/Documents/HabitsApp/frontend/src/components/DatesGrid.js\";\nimport React from 'react';\nimport '../styles/DatesGrid.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Square = ({\n  day,\n  date,\n  fullDate\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dates-grid__square\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dates-grid__square__day-name\",\n      children: day\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dates-grid__square__day-num\",\n      children: date\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"dates-grid__square__full-date\",\n      children: fullDate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n};\n_c = Square;\nconst DatesGrid = () => {\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const today = new Date();\n  const dates = [];\n\n  // Generate the next 6 dates\n  for (let i = 0; i < 7; i++) {\n    const date = new Date();\n    const fullDate = date.toLocaleDateString(\"sl-SI\", {\n      month: \"numeric\",\n      day: \"numeric\",\n      year: \"numeric\"\n    });\n    date.setDate(today.getDate() + i);\n    dates.push(date, fullDate);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"dates-grid\",\n    children: dates.map((date, index) => /*#__PURE__*/_jsxDEV(Square, {\n      day: daysOfWeek[date.date.getDay()],\n      date: date.date.getDate()\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_c2 = DatesGrid;\nexport default DatesGrid;\nvar _c, _c2;\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"DatesGrid\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Square","day","date","fullDate","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","DatesGrid","daysOfWeek","today","Date","dates","i","toLocaleDateString","month","year","setDate","getDate","push","map","index","getDay","_c2","$RefreshReg$"],"sources":["/Users/gaspersimec/Documents/HabitsApp/frontend/src/components/DatesGrid.js"],"sourcesContent":["import React from 'react';\nimport '../styles/DatesGrid.css'\n\nconst Square = ({ day, date, fullDate }) => {\n  return (\n    <div className=\"dates-grid__square\">\n      <div className=\"dates-grid__square__day-name\">{day}</div>\n      <div className=\"dates-grid__square__day-num\">{date}</div>\n      <div className=\"dates-grid__square__full-date\">{fullDate}</div>\n    </div>\n  );\n};\n\nconst DatesGrid = () => {\n  const daysOfWeek = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n  const today = new Date();\n  const dates = [];\n  \n  // Generate the next 6 dates\n  for (let i = 0; i < 7; i++) {\n    const date = new Date();\n    const fullDate = date.toLocaleDateString(\"sl-SI\", {\n      month: \"numeric\",\n      day: \"numeric\",\n      year: \"numeric\",\n    });\n    date.setDate(today.getDate() + i);\n    dates.push(date, fullDate);\n  }\n  \n  return (\n    <div className=\"dates-grid\">\n      {dates.map((date, index) => (\n        <Square\n          key={index}\n          day={daysOfWeek[date.date.getDay()]}\n          date={date.date.getDate()}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default DatesGrid;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,yBAAyB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,MAAM,GAAGA,CAAC;EAAEC,GAAG;EAAEC,IAAI;EAAEC;AAAS,CAAC,KAAK;EAC1C,oBACEJ,OAAA;IAAKK,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjCN,OAAA;MAAKK,SAAS,EAAC,8BAA8B;MAAAC,QAAA,EAAEJ;IAAG;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACzDV,OAAA;MAAKK,SAAS,EAAC,6BAA6B;MAAAC,QAAA,EAAEH;IAAI;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC,eACzDV,OAAA;MAAKK,SAAS,EAAC,+BAA+B;MAAAC,QAAA,EAAEF;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC5D,CAAC;AAEV,CAAC;AAACC,EAAA,GARIV,MAAM;AAUZ,MAAMW,SAAS,GAAGA,CAAA,KAAM;EACtB,MAAMC,UAAU,GAAG,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;EACpE,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;EACxB,MAAMC,KAAK,GAAG,EAAE;;EAEhB;EACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC1B,MAAMd,IAAI,GAAG,IAAIY,IAAI,CAAC,CAAC;IACvB,MAAMX,QAAQ,GAAGD,IAAI,CAACe,kBAAkB,CAAC,OAAO,EAAE;MAChDC,KAAK,EAAE,SAAS;MAChBjB,GAAG,EAAE,SAAS;MACdkB,IAAI,EAAE;IACR,CAAC,CAAC;IACFjB,IAAI,CAACkB,OAAO,CAACP,KAAK,CAACQ,OAAO,CAAC,CAAC,GAAGL,CAAC,CAAC;IACjCD,KAAK,CAACO,IAAI,CAACpB,IAAI,EAAEC,QAAQ,CAAC;EAC5B;EAEA,oBACEJ,OAAA;IAAKK,SAAS,EAAC,YAAY;IAAAC,QAAA,EACxBU,KAAK,CAACQ,GAAG,CAAC,CAACrB,IAAI,EAAEsB,KAAK,kBACrBzB,OAAA,CAACC,MAAM;MAELC,GAAG,EAAEW,UAAU,CAACV,IAAI,CAACA,IAAI,CAACuB,MAAM,CAAC,CAAC,CAAE;MACpCvB,IAAI,EAAEA,IAAI,CAACA,IAAI,CAACmB,OAAO,CAAC;IAAE,GAFrBG,KAAK;MAAAlB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAGX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACiB,GAAA,GA5BIf,SAAS;AA8Bf,eAAeA,SAAS;AAAC,IAAAD,EAAA,EAAAgB,GAAA;AAAAC,YAAA,CAAAjB,EAAA;AAAAiB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}